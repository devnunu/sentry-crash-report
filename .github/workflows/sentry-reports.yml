name: Sentry Daily & Weekly Reports

on:
  # 매주 월요일 09:00 KST (00:00 UTC) → 주간 리포트
  schedule:
    - cron: "0 0 * * 1"
    # 화~금 09:00 KST (00:00 UTC) → 일간 리포트
    - cron: "0 0 * * 2-5"

  # 수동 실행(필터 선택 가능)
  workflow_dispatch:
    inputs:
      which:
        description: "Run which report?"
        type: choice
        required: true
        default: both
        options: [both, weekly, daily]
      platform:
        description: "Target platform"
        type: choice
        required: true
        default: both
        options: [both, android, ios]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # ===========================
  #          WEEKLY
  # ===========================
  weekly:
    name: "Weekly (${{ matrix.platform }})"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [android, ios]

    steps:
      - name: Set WHICH for schedule (UTC DOW)
        if: github.event_name == 'schedule'
        shell: bash
        run: |
          # 월=1, 화=2 ... 일=7 (UTC 기준)
          DOW=$(date -u +%u)
          if [ "$DOW" -eq 1 ]; then
            echo "WHICH=weekly" >> "$GITHUB_ENV"
          else
            echo "WHICH=daily" >> "$GITHUB_ENV"
          fi
          echo "Detected DOW=$DOW, WHICH=$WHICH"

      - name: Set WHICH/PLATFORM for dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "WHICH=${{ github.event.inputs.which }}" >> "$GITHUB_ENV"
          echo "DISPATCH_PLATFORM=${{ github.event.inputs.platform }}" >> "$GITHUB_ENV"

      - name: Dispatch filter for weekly
        shell: bash
        run: |
          WHICH="${WHICH:-weekly}"
          PLAT="${DISPATCH_PLATFORM:-both}"

          # 주간 잡은 WHICH가 weekly가 아닐 때 스킵(성공 처리)
          if [ "$WHICH" != "weekly" ]; then
            echo "Weekly job: WHICH=$WHICH → skip."
            echo "SKIP_JOB=1" >> "$GITHUB_ENV"
            exit 0
          fi

          # 플랫폼 필터
          if [ "$PLAT" != "both" ] && [ "$PLAT" != "${{ matrix.platform }}" ]; then
            echo "Weekly job: platform filter excludes ${{ matrix.platform }} → skip."
            echo "SKIP_JOB=1" >> "$GITHUB_ENV"
            exit 0
          fi

          echo "Proceed weekly for ${{ matrix.platform }}"

      - name: Check out repo
        if: env.SKIP_JOB != '1'
        uses: actions/checkout@v4

      - name: Setup Python
        if: env.SKIP_JOB != '1'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps
        if: env.SKIP_JOB != '1'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Prepare ENV (weekly)
        if: env.SKIP_JOB != '1'
        shell: bash
        run: |
          # 공통
          echo "SENTRY_ORG_SLUG=$(printf '%s' "${{ vars.SENTRY_ORG_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          echo "SENTRY_AUTH_TOKEN=$(printf '%s' "${{ secrets.SENTRY_AUTH_TOKEN }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          echo "OPENAI_API_KEY=$(printf '%s' "${{ secrets.OPENAI_API_KEY }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"

          if [ "${{ matrix.platform }}" = "android" ]; then
            echo "SENTRY_PROJECT_ID=$(printf '%s' "${{ vars.ANDROID_PROJECT_ID }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_PROJECT_SLUG=$(printf '%s' "${{ vars.ANDROID_PROJECT_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_DASHBOARD_URL=$(printf '%s' "${{ vars.ANDROID_DASHBOARD_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_ENVIRONMENT=Production" >> "$GITHUB_ENV"
            echo "SLACK_WEBHOOK_URL=$(printf '%s' "${{ secrets.ANDROID_SLACK_WEBHOOK_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          else
            echo "SENTRY_PROJECT_ID=$(printf '%s' "${{ vars.IOS_PROJECT_ID }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_PROJECT_SLUG=$(printf '%s' "${{ vars.IOS_PROJECT_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_DASHBOARD_URL=$(printf '%s' "${{ vars.IOS_DASHBOARD_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_ENVIRONMENT=" >> "$GITHUB_ENV"   # iOS는 env 미사용
            echo "SLACK_WEBHOOK_URL=$(printf '%s' "${{ secrets.IOS_SLACK_WEBHOOK_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          fi

      - name: Run weekly report
        if: env.SKIP_JOB != '1'
        run: python sentry_weekly_crash_report.py

  # ===========================
  #           DAILY
  # ===========================
  daily:
    name: "Daily (${{ matrix.platform }})"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [android, ios]

    steps:
      - name: Set WHICH for schedule (UTC DOW)
        if: github.event_name == 'schedule'
        shell: bash
        run: |
          # 월=1, 화=2 ... 일=7 (UTC 기준)
          DOW=$(date -u +%u)
          if [ "$DOW" -eq 1 ]; then
            echo "WHICH=weekly" >> "$GITHUB_ENV"
          else
            echo "WHICH=daily" >> "$GITHUB_ENV"
          fi
          echo "Detected DOW=$DOW, WHICH=$WHICH"

      - name: Set WHICH/PLATFORM for dispatch
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "WHICH=${{ github.event.inputs.which }}" >> "$GITHUB_ENV"
          echo "DISPATCH_PLATFORM=${{ github.event.inputs.platform }}" >> "$GITHUB_ENV"

      - name: Dispatch filter for daily
        shell: bash
        run: |
          WHICH="${WHICH:-daily}"
          PLAT="${DISPATCH_PLATFORM:-both}"

          # 일간 잡은 WHICH가 daily가 아닐 때 스킵(성공 처리)
          if [ "$WHICH" != "daily" ]; then
            echo "Daily job: WHICH=$WHICH → skip."
            echo "SKIP_JOB=1" >> "$GITHUB_ENV"
            exit 0
          fi

          # 플랫폼 필터
          if [ "$PLAT" != "both" ] && [ "$PLAT" != "${{ matrix.platform }}" ]; then
            echo "Daily job: platform filter excludes ${{ matrix.platform }} → skip."
            echo "SKIP_JOB=1" >> "$GITHUB_ENV"
            exit 0
          fi

          echo "Proceed daily for ${{ matrix.platform }}"

      - name: Check out repo
        if: env.SKIP_JOB != '1'
        uses: actions/checkout@v4

      - name: Setup Python
        if: env.SKIP_JOB != '1'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps
        if: env.SKIP_JOB != '1'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Prepare ENV (daily)
        if: env.SKIP_JOB != '1'
        shell: bash
        run: |
          # 공통
          echo "SENTRY_ORG_SLUG=$(printf '%s' "${{ vars.SENTRY_ORG_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          echo "SENTRY_AUTH_TOKEN=$(printf '%s' "${{ secrets.SENTRY_AUTH_TOKEN }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          echo "OPENAI_API_KEY=$(printf '%s' "${{ secrets.OPENAI_API_KEY }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"

          if [ "${{ matrix.platform }}" = "android" ]; then
            echo "SENTRY_PROJECT_ID=$(printf '%s' "${{ vars.ANDROID_PROJECT_ID }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_PROJECT_SLUG=$(printf '%s' "${{ vars.ANDROID_PROJECT_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_DASHBOARD_URL=$(printf '%s' "${{ vars.ANDROID_DASHBOARD_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_ENVIRONMENT=Production" >> "$GITHUB_ENV"
            echo "SLACK_WEBHOOK_URL=$(printf '%s' "${{ secrets.ANDROID_SLACK_WEBHOOK_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          else
            echo "SENTRY_PROJECT_ID=$(printf '%s' "${{ vars.IOS_PROJECT_ID }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_PROJECT_SLUG=$(printf '%s' "${{ vars.IOS_PROJECT_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_DASHBOARD_URL=$(printf '%s' "${{ vars.IOS_DASHBOARD_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_ENVIRONMENT=" >> "$GITHUB_ENV"   # iOS는 env 미사용
            echo "SLACK_WEBHOOK_URL=$(printf '%s' "${{ secrets.IOS_SLACK_WEBHOOK_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          fi

      - name: Run daily report
        if: env.SKIP_JOB != '1'
        run: python sentry_daily_crash_report.py