name: Sentry Daily & Weekly Reports

on:
  schedule:
    # 09:00 KST = 00:00 UTC
    - cron: "0 0 * * 1"     # Monday weekly
    - cron: "0 0 * * 2-5"   # Tue-Fri daily
  workflow_dispatch:
    inputs:
      which:
        type: choice
        description: "Run which report?"
        options: [daily, weekly, both]
        default: both
        required: true
      platform:
        type: choice
        description: "Run for which platform?"
        options: [android, ios, both]
        default: both
        required: true

permissions:
  contents: read

jobs:
  weekly:
    name: Weekly (${{ matrix.platform }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [android, ios]

    steps:
      - name: Check-out repo
        uses: actions/checkout@v4

      # ---- 디스패치 필터(weekly) : 스킵만 표시, 실패 처리 안함 ----
      - name: Plan (weekly dispatch filter)
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            WHICH="${{ github.event.inputs.which }}"
            PLATFORM="${{ github.event.inputs.platform }}"
            if [ "$WHICH" != "weekly" ] && [ "$WHICH" != "both" ]; then
              echo "SKIP_WEEKLY=1" >> $GITHUB_ENV
              echo "Skip weekly: which=$WHICH"; fi
            if [ "$PLATFORM" != "both" ] && [ "$PLATFORM" != "${{ matrix.platform }}" ]; then
              echo "SKIP_WEEKLY=1" >> $GITHUB_ENV
              echo "Skip weekly: platform=$PLATFORM (matrix=${{ matrix.platform }})"; fi
          fi

      - name: Mark skipped (weekly)
        if: env.SKIP_WEEKLY == '1'
        run: echo "Weekly(${{ matrix.platform }}) skipped by dispatch filters."

      - name: Set up Python
        if: env.SKIP_WEEKLY != '1'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        if: env.SKIP_WEEKLY != '1'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # ---- 공통 ENV 주입(개행/공백 제거) ----
      - name: Prepare base ENV
        if: env.SKIP_WEEKLY != '1'
        run: |
          echo "SENTRY_ORG_SLUG=$(printf '%s' "${{ vars.SENTRY_ORG_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          echo "SENTRY_AUTH_TOKEN=$(printf '%s' "${{ secrets.SENTRY_AUTH_TOKEN }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          echo "OPENAI_API_KEY=$(printf '%s' "${{ secrets.OPENAI_API_KEY }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"

          if [ "${{ matrix.platform }}" = "android" ]; then
            echo "SENTRY_PROJECT_ID=$(printf '%s' "${{ vars.ANDROID_PROJECT_ID }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_PROJECT_SLUG=$(printf '%s' "${{ vars.ANDROID_PROJECT_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_DASHBOARD_URL=$(printf '%s' "${{ vars.ANDROID_DASHBOARD_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_ENVIRONMENT=Production" >> "$GITHUB_ENV"
          else
            echo "SENTRY_PROJECT_ID=$(printf '%s' "${{ vars.IOS_PROJECT_ID }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_PROJECT_SLUG=$(printf '%s' "${{ vars.IOS_PROJECT_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_DASHBOARD_URL=$(printf '%s' "${{ vars.IOS_DASHBOARD_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_ENVIRONMENT=" >> "$GITHUB_ENV"
          fi

      - name: Set platform-specific Slack webhook
        if: env.SKIP_WEEKLY != '1'
        run: |
          if [ "${{ matrix.platform }}" = "android" ]; then
            echo "SLACK_WEBHOOK_URL=$(printf '%s' "${{ secrets.ANDROID_SLACK_WEBHOOK_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          else
            echo "SLACK_WEBHOOK_URL=$(printf '%s' "${{ secrets.IOS_SLACK_WEBHOOK_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          fi

      - name: Check webhook presence
        if: env.SKIP_WEEKLY != '1'
        run: |
          [ -n "${SLACK_WEBHOOK_URL}" ] || { echo "SLACK_WEBHOOK_URL is empty"; exit 1; }
          echo "SLACK_WEBHOOK_URL length: ${#SLACK_WEBHOOK_URL}"

      - name: Run weekly report
        if: env.SKIP_WEEKLY != '1'
        env:
          PYTHONUNBUFFERED: "1"
        run: python sentry_weekly_crash_report.py

  daily:
    name: Daily (${{ matrix.platform }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [android, ios]

    steps:
      - name: Check-out repo
        uses: actions/checkout@v4

      # ---- 디스패치 필터(daily) : 스킵만 표시, 실패 처리 안함 ----
      - name: Plan (daily dispatch filter)
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            WHICH="${{ github.event.inputs.which }}"
            PLATFORM="${{ github.event.inputs.platform }}"
            if [ "$WHICH" != "daily" ] && [ "$WHICH" != "both" ]; then
              echo "SKIP_DAILY=1" >> $GITHUB_ENV
              echo "Skip daily: which=$WHICH"; fi
            if [ "$PLATFORM" != "both" ] && [ "$PLATFORM" != "${{ matrix.platform }}" ]; then
              echo "SKIP_DAILY=1" >> $GITHUB_ENV
              echo "Skip daily: platform=$PLATFORM (matrix=${{ matrix.platform }})"; fi
          fi

      - name: Mark skipped (daily)
        if: env.SKIP_DAILY == '1'
        run: echo "Daily(${{ matrix.platform }}) skipped by dispatch filters."

      - name: Set up Python
        if: env.SKIP_DAILY != '1'
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        if: env.SKIP_DAILY != '1'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Prepare base ENV
        if: env.SKIP_DAILY != '1'
        run: |
          echo "SENTRY_ORG_SLUG=$(printf '%s' "${{ vars.SENTRY_ORG_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          echo "SENTRY_AUTH_TOKEN=$(printf '%s' "${{ secrets.SENTRY_AUTH_TOKEN }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"

          if [ "${{ matrix.platform }}" = "android" ]; then
            echo "SENTRY_PROJECT_ID=$(printf '%s' "${{ vars.ANDROID_PROJECT_ID }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_PROJECT_SLUG=$(printf '%s' "${{ vars.ANDROID_PROJECT_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_DASHBOARD_URL=$(printf '%s' "${{ vars.ANDROID_DASHBOARD_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_ENVIRONMENT=Production" >> "$GITHUB_ENV"
          else
            echo "SENTRY_PROJECT_ID=$(printf '%s' "${{ vars.IOS_PROJECT_ID }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_PROJECT_SLUG=$(printf '%s' "${{ vars.IOS_PROJECT_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_DASHBOARD_URL=$(printf '%s' "${{ vars.IOS_DASHBOARD_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_ENVIRONMENT=" >> "$GITHUB_ENV"
          fi

      - name: Set platform-specific Slack webhook
        if: env.SKIP_DAILY != '1'
        run: |
          if [ "${{ matrix.platform }}" = "android" ]; then
            echo "SLACK_WEBHOOK_URL=$(printf '%s' "${{ secrets.ANDROID_SLACK_WEBHOOK_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          else
            echo "SLACK_WEBHOOK_URL=$(printf '%s' "${{ secrets.IOS_SLACK_WEBHOOK_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          fi

      - name: Check webhook presence
        if: env.SKIP_DAILY != '1'
        run: |
          [ -n "${SLACK_WEBHOOK_URL}" ] || { echo "SLACK_WEBHOOK_URL is empty"; exit 1; }
          echo "SLACK_WEBHOOK_URL length: ${#SLACK_WEBHOOK_URL}"

      - name: Run daily report
        if: env.SKIP_DAILY != '1'
        env:
          PYTHONUNBUFFERED: "1"
        run: python sentry_daily_crash_report.py