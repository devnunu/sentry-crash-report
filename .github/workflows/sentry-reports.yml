name: Sentry Daily & Weekly Reports

on:
  schedule:
    # 09:00 KST = 00:00 UTC
    - cron: "0 0 * * 1"     # Monday weekly
    - cron: "0 0 * * 2-5"   # Tue-Fri daily
  workflow_dispatch:
    inputs:
      which:
        type: choice
        description: "Run which report?"
        options: [daily, weekly, both]
        default: both
        required: true
      platform:
        type: choice
        description: "Run for which platform?"
        options: [android, ios, both]
        default: both
        required: true

permissions:
  contents: read

jobs:
  weekly:
    name: Weekly (${{ matrix.platform }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [android, ios]

    steps:
      - name: Check-out repo
        uses: actions/checkout@v4

      # ---- 디스패치 필터(weekly 전용) ----
      - name: Dispatch filter for weekly
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          WHICH="${{ github.event.inputs.which }}"
          PLATFORM="${{ github.event.inputs.platform }}"
          if [ "$WHICH" != "weekly" ] && [ "$WHICH" != "both" ]; then
            echo "Dispatch says WHICH=$WHICH (not weekly/both). Exiting."; exit 78;
          fi
          if [ "$PLATFORM" != "both" ] && [ "$PLATFORM" != "${{ matrix.platform }}" ]; then
            echo "Dispatch platform filter excludes this matrix (${{ matrix.platform }}). Exiting."; exit 78;
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # ---- 공통 ENV 주입(개행/공백 제거) ----
      - name: Prepare base ENV
        run: |
          # 기본 공통 값들(Repository Variables 권장)
          echo "SENTRY_ORG_SLUG=$(printf '%s' "${{ vars.SENTRY_ORG_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          echo "SENTRY_AUTH_TOKEN=$(printf '%s' "${{ secrets.SENTRY_AUTH_TOKEN }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"

          # 플랫폼별 프로젝트/대시보드 값 분기
          if [ "${{ matrix.platform }}" = "android" ]; then
            echo "SENTRY_PROJECT_ID=$(printf '%s' "${{ vars.ANDROID_PROJECT_ID }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_PROJECT_SLUG=$(printf '%s' "${{ vars.ANDROID_PROJECT_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_DASHBOARD_URL=$(printf '%s' "${{ vars.ANDROID_DASHBOARD_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_ENVIRONMENT=Production" >> "$GITHUB_ENV"   # Android만 사용
          else
            echo "SENTRY_PROJECT_ID=$(printf '%s' "${{ vars.IOS_PROJECT_ID }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_PROJECT_SLUG=$(printf '%s' "${{ vars.IOS_PROJECT_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_DASHBOARD_URL=$(printf '%s' "${{ vars.IOS_DASHBOARD_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_ENVIRONMENT=" >> "$GITHUB_ENV"             # iOS는 비움
          fi

      # ---- 플랫폼별 Slack Webhook 설정 ----
      - name: Set platform-specific Slack webhook
        run: |
          if [ "${{ matrix.platform }}" = "android" ]; then
            echo "SLACK_WEBHOOK_URL=$(printf '%s' "${{ secrets.ANDROID_SLACK_WEBHOOK_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          else
            echo "SLACK_WEBHOOK_URL=$(printf '%s' "${{ secrets.IOS_SLACK_WEBHOOK_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          fi

      - name: Check webhook presence
        run: |
          if [ -z "${SLACK_WEBHOOK_URL}" ]; then
            echo "SLACK_WEBHOOK_URL is empty"; exit 1
          fi
          echo "SLACK_WEBHOOK_URL length: ${#SLACK_WEBHOOK_URL}"

      - name: Run weekly report
        env:
          PYTHONUNBUFFERED: "1"
        run: |
          python sentry_weekly_crash_report.py

  daily:
    name: Daily (${{ matrix.platform }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [android, ios]

    steps:
      - name: Check-out repo
        uses: actions/checkout@v4

      # ---- 디스패치 필터(daily 전용) ----
      - name: Dispatch filter for daily
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          WHICH="${{ github.event.inputs.which }}"
          PLATFORM="${{ github.event.inputs.platform }}"
          if [ "$WHICH" != "daily" ] && [ "$WHICH" != "both" ]; then
            echo "Dispatch says WHICH=$WHICH (not daily/both). Exiting."; exit 78;
          fi
          if [ "$PLATFORM" != "both" ] && [ "$PLATFORM" != "${{ matrix.platform }}" ]; then
            echo "Dispatch platform filter excludes this matrix (${{ matrix.platform }}). Exiting."; exit 78;
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # ---- 공통 ENV 주입(개행/공백 제거) ----
      - name: Prepare base ENV
        run: |
          echo "SENTRY_ORG_SLUG=$(printf '%s' "${{ vars.SENTRY_ORG_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          echo "SENTRY_AUTH_TOKEN=$(printf '%s' "${{ secrets.SENTRY_AUTH_TOKEN }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"

          if [ "${{ matrix.platform }}" = "android" ]; then
            echo "SENTRY_PROJECT_ID=$(printf '%s' "${{ vars.ANDROID_PROJECT_ID }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_PROJECT_SLUG=$(printf '%s' "${{ vars.ANDROID_PROJECT_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_DASHBOARD_URL=$(printf '%s' "${{ vars.ANDROID_DASHBOARD_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_ENVIRONMENT=Production" >> "$GITHUB_ENV"
          else
            echo "SENTRY_PROJECT_ID=$(printf '%s' "${{ vars.IOS_PROJECT_ID }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_PROJECT_SLUG=$(printf '%s' "${{ vars.IOS_PROJECT_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_DASHBOARD_URL=$(printf '%s' "${{ vars.IOS_DASHBOARD_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_ENVIRONMENT=" >> "$GITHUB_ENV"
          fi

      # ---- 플랫폼별 Slack Webhook 설정 ----
      - name: Set platform-specific Slack webhook
        run: |
          if [ "${{ matrix.platform }}" = "android" ]; then
            echo "SLACK_WEBHOOK_URL=$(printf '%s' "${{ secrets.ANDROID_SLACK_WEBHOOK_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          else
            echo "SLACK_WEBHOOK_URL=$(printf '%s' "${{ secrets.IOS_SLACK_WEBHOOK_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          fi

      - name: Check webhook presence
        run: |
          if [ -z "${SLACK_WEBHOOK_URL}" ]; then
            echo "SLACK_WEBHOOK_URL is empty"; exit 1
          fi
          echo "SLACK_WEBHOOK_URL length: ${#SLACK_WEBHOOK_URL}"

      - name: Run daily report
        env:
          PYTHONUNBUFFERED: "1"
        run: |
          python sentry_daily_crash_report.py