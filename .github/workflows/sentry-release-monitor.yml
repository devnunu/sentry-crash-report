name: Sentry Release Monitor

on:
  # 수동 실행 (필수 입력: 베이스 버전)
  workflow_dispatch:
    inputs:
      platform:
        description: "Target platform"
        type: choice
        required: true
        default: both
        options: [both, android, ios]
      base_version:
        description: "Semver base (e.g. 4.69.0)"
        required: true
      hours:
        description: "Monitoring hours (default 168=7days)"
        required: false
        default: "168"

env:
  PYTHON_VERSION: "3.11"

jobs:
  monitor:
    name: Monitor (${{ matrix.platform }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [android, ios]

    steps:
      - name: Filter by dispatch platform
        shell: bash
        run: |
          PLAT="${{ github.event.inputs.platform }}"
          if [ "$PLAT" != "both" ] && [ "$PLAT" != "${{ matrix.platform }}" ]; then
            echo "Skip ${{ matrix.platform }} (dispatch platform = $PLAT)"
            echo "SKIP=1" >> "$GITHUB_ENV"
            exit 0
          fi
          echo "Proceed for ${{ matrix.platform }}"

      - name: Check out repo
        if: env.SKIP != '1'
        uses: actions/checkout@v4

      - name: Setup Python
        if: env.SKIP != '1'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install deps
        if: env.SKIP != '1'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Prepare ENV
        if: env.SKIP != '1'
        shell: bash
        run: |
          # 공통(개행/공백 방지용으로 printf | tr -d '\r' | xargs 사용)
          echo "SENTRY_ORG_SLUG=$(printf '%s' "${{ vars.SENTRY_ORG_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          echo "SENTRY_AUTH_TOKEN=$(printf '%s' "${{ secrets.SENTRY_AUTH_TOKEN }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          echo "OPENAI_API_KEY=$(printf '%s' "${{ secrets.OPENAI_API_KEY }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"

          echo "MONITOR_BASE_VERSION=$(printf '%s' "${{ github.event.inputs.base_version }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          echo "MONITOR_HOURS=$(printf '%s' "${{ github.event.inputs.hours }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"

          if [ "${{ matrix.platform }}" = "android" ]; then
            echo "SENTRY_PROJECT_ID=$(printf '%s' "${{ vars.ANDROID_PROJECT_ID }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_PROJECT_SLUG=$(printf '%s' "${{ vars.ANDROID_PROJECT_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_ENVIRONMENT=Production" >> "$GITHUB_ENV"
            # 모니터링 전용 Slack 웹훅(iOS/Android 분리) → 공통 키로 매핑
            echo "SLACK_MONITORING_WEBHOOK_URL=$(printf '%s' "${{ secrets.ANDROID_SLACK_MONITORING_WEBHOOK_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          else
            echo "SENTRY_PROJECT_ID=$(printf '%s' "${{ vars.IOS_PROJECT_ID }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_PROJECT_SLUG=$(printf '%s' "${{ vars.IOS_PROJECT_SLUG }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
            echo "SENTRY_ENVIRONMENT=" >> "$GITHUB_ENV"   # iOS는 environment 미사용
            echo "SLACK_MONITORING_WEBHOOK_URL=$(printf '%s' "${{ secrets.IOS_SLACK_MONITORING_WEBHOOK_URL }}" | tr -d '\r' | xargs)" >> "$GITHUB_ENV"
          fi

      - name: Run release monitor (one-shot start)
        if: env.SKIP != '1'
        run: |
          # sentry_release_monitor.py가 SLACK_MONITORING_WEBHOOK_URL 우선 사용(없으면 SLACK_WEBHOOK_URL 폴백)
          python sentry_release_monitor.py \
            --org "$SENTRY_ORG_SLUG" \
            --project-id "$SENTRY_PROJECT_ID" \
            --base-version "$MONITOR_BASE_VERSION" \
            --hours "$MONITOR_HOURS"