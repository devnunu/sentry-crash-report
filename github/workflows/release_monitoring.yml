name: Release Monitoring

on:
  # 수동 실행 (새 릴리즈 모니터링 시작)
  workflow_dispatch:
    inputs:
      action:
        description: '실행할 작업'
        required: true
        type: choice
        options:
          - 'start_monitoring'
          - 'cancel_monitoring'
          - 'status_check'
        default: 'start_monitoring'
      release_version:
        description: '릴리즈 버전 (예: 4.66.0)'
        required: false
        type: string
      release_start_time:
        description: '릴리즈 시작 시간 (YYYY-MM-DD HH:MM KST, 비워두면 현재 시간)'
        required: false
        type: string
        default: ''
      monitoring_duration:
        description: '모니터링 기간 (시간 단위, 기본 7일)'
        required: false
        type: string
        default: '168'

  # 자동 실행 (15분마다 체크)
  schedule:
    - cron: '*/15 * * * *'  # 15분마다 실행

jobs:
  release-monitoring:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # 타임아웃 설정 (무한 대기 방지)

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # monitoring_state.json 파일 변경사항을 커밋하기 위해 토큰 필요
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'  # pip 캐시 활용

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install requests python-dotenv

      - name: Validate required secrets
        run: |
          # 필수 시크릿 검증
          if [ -z "${{ secrets.SENTRY_AUTH_TOKEN }}" ]; then
            echo "❌ SENTRY_AUTH_TOKEN이 설정되지 않았습니다."
            exit 1
          fi
          if [ -z "${{ secrets.SENTRY_ORG_SLUG }}" ]; then
            echo "❌ SENTRY_ORG_SLUG가 설정되지 않았습니다."
            exit 1
          fi
          if [ -z "${{ secrets.SENTRY_PROJECT_SLUG }}" ]; then
            echo "❌ SENTRY_PROJECT_SLUG가 설정되지 않았습니다."
            exit 1
          fi
          echo "✅ 필수 시크릿 검증 완료"

      - name: Run Release Monitoring
        env:
          # Sentry 설정
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG_SLUG: ${{ secrets.SENTRY_ORG_SLUG }}
          SENTRY_PROJECT_SLUG: ${{ secrets.SENTRY_PROJECT_SLUG }}
          SENTRY_PROJECT_ID: ${{ secrets.SENTRY_PROJECT_ID }}
          SENTRY_ENVIRONMENT: ${{ secrets.SENTRY_ENVIRONMENT }}

          # Slack 설정
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

          # 대시보드 설정 (선택사항)
          DASH_BOARD_ID: ${{ secrets.DASH_BOARD_ID }}

          # GitHub Actions 입력값
          INPUT_ACTION: ${{ github.event.inputs.action }}
          INPUT_RELEASE_VERSION: ${{ github.event.inputs.release_version }}
          INPUT_RELEASE_START_TIME: ${{ github.event.inputs.release_start_time }}
          INPUT_MONITORING_DURATION: ${{ github.event.inputs.monitoring_duration }}

          # GitHub 관련 정보
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_SERVER_URL: ${{ github.server_url }}

          # 실행 모드 구분
          TEST_MODE: false
        run: |
          echo "🚀 릴리즈 모니터링 시작..."
          echo "📅 실행 시간: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "👤 실행자: ${{ github.actor }}"
          echo "🎯 작업: ${{ github.event.inputs.action }}"
          
          # 작업별 실행
          case "${{ github.event.inputs.action }}" in
            "start_monitoring")
              echo "📝 모니터링 시작 모드"
              if [ -z "${{ github.event.inputs.release_version }}" ]; then
                echo "❌ 릴리즈 버전이 필요합니다."
                exit 1
              fi
              ;;
            "cancel_monitoring")
              echo "🗑️ 모니터링 취소 모드"
              if [ -z "${{ github.event.inputs.release_version }}" ]; then
                echo "❌ 취소할 릴리즈 버전이 필요합니다."
                exit 1
              fi
              ;;
            "status_check")
              echo "📊 상태 확인 모드"
              ;;
            *)
              echo "❌ 알 수 없는 작업: ${{ github.event.inputs.action }}"
              exit 1
              ;;
          esac
          
          python release_monitoring/release_monitor.py

      - name: Handle monitoring failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          # 실패 시 Slack 알림 전송
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            curl -X POST "$SLACK_WEBHOOK_URL" \
              -H 'Content-Type: application/json' \
              -d '{
                "text": "🚨 릴리즈 모니터링 워크플로우 실패",
                "blocks": [
                  {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*🚨 릴리즈 모니터링 워크플로우 실패*\n\n• 저장소: `${{ github.repository }}`\n• 실행자: ${{ github.actor }}\n• 실행 ID: ${{ github.run_id }}\n• 시간: '"$(date)"'"
                    }
                  },
                  {
                    "type": "actions",
                    "elements": [
                      {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "GitHub Actions 로그 확인"
                        },
                        "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                      }
                    ]
                  }
                ]
              }'
          fi

      - name: Commit monitoring state changes
        if: always()
        run: |
          # Git 설정
          git config --local user.email "actions@github.com"
          git config --local user.name "Release Monitor Bot"
          
          # monitoring_state.json 변경사항 확인 및 커밋
          if [ -f "release_monitoring/monitoring_state.json" ]; then
            if ! git diff --exit-code release_monitoring/monitoring_state.json > /dev/null 2>&1; then
              echo "📝 모니터링 상태 변경사항 감지, 커밋 중..."
              git add release_monitoring/monitoring_state.json
              
              # 커밋 메시지에 더 많은 정보 포함
              if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                COMMIT_MSG="🚀 릴리즈 모니터링 상태 업데이트: ${{ github.event.inputs.release_version }} [skip ci]"
              else
                COMMIT_MSG="⏰ 정기 모니터링 상태 업데이트 [skip ci]"
              fi
              
              git commit -m "$COMMIT_MSG"
              git push
              echo "✅ 모니터링 상태가 업데이트되었습니다."
            else
              echo "📄 모니터링 상태 변경사항이 없습니다."
            fi
          else
            echo "⚠️ monitoring_state.json 파일이 없습니다."
          fi

      - name: Upload artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: monitoring-failure-logs-${{ github.run_id }}
          path: |
            release_monitoring/monitoring_state.json
            release_monitoring/debug_output/
          retention-days: 7
          if-no-files-found: ignore

      - name: Summary
        if: always()
        run: |
          echo "## 🎯 릴리즈 모니터링 실행 요약" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **실행 유형**: ${{ github.event_name == 'workflow_dispatch' && '수동 실행' || '자동 실행' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **실행 시간**: $(date '+%Y-%m-%d %H:%M:%S %Z')" >> $GITHUB_STEP_SUMMARY
          echo "- **실행자**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "- **릴리즈 버전**: ${{ github.event.inputs.release_version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **모니터링 기간**: ${{ github.event.inputs.monitoring_duration }}시간" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "- **상태**: ✅ 성공" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **상태**: ❌ 실패" >> $GITHUB_STEP_SUMMARY
          fi